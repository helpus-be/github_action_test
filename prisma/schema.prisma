// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  // 검색에 사용되는 라이브러리
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId      Int           @id @default(autoincrement())
  userName    String
  email       String?       @unique
  password    String?
  state1      String?
  state2      String?
  userImage   String?
  score       Float         @default(0)
  kakao       BigInt?       @unique
  Post        Post[]
  Wish        Wish[]
  Score       Score[]
  SocketTable SocketTable[]
  Chat        Chat[]
  Sender      Room[]        @relation("Sender")
  Owner       Room[]        @relation("Owner")
  Alarm       Alarm[]

  @@unique([userId, userName])
}

model Score {
  id     Int   @id @default(autoincrement())
  userId Int
  user   User  @relation(fields: [userId], references: [userId], onDelete: Cascade)
  score  Float
}

model Post {
  postId     Int       @id @default(autoincrement())
  userId     Int
  userName   String
  user       User      @relation(fields: [userId, userName], references: [userId, userName], onDelete: Cascade)
  title      String
  content    String
  category   Int
  appointed  DateTime?
  isDeadLine Int?      @default(0)
  location1  String?
  location2  String?
  imageUrl1  String?
  imageUrl2  String?
  imageUrl3  String?
  tag        String?
  createdAt  DateTime  @default(now())
  updated    Int       @default(0)
  Wish       Wish[]
  Room       Room[]
  Alarm      Alarm[]
}

model Chat {
  chatId    Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [userId])
  Room      Room     @relation(fields: [roomId], references: [roomId])
  roomId    String
  content   String
  createdAt DateTime @default(now())
  userId    Int
}

model Room {
  roomId   String @id
  sender   User   @relation("Sender", fields: [senderId], references: [userId])
  owner    User   @relation("Owner", fields: [ownerId], references: [userId])
  Post     Post   @relation(fields: [postId], references: [postId])
  ownerId  Int
  senderId Int
  postId   Int
  Chat     Chat[]
}

model SocketTable {
  socketId String @id
  user     User   @relation(fields: [userId], references: [userId])
  userId   Int
}

model Wish {
  post   Post @relation(fields: [postId], references: [postId], onDelete: Cascade)
  postId Int
  user   User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId Int

  @@id([postId, userId])
}

model Alarm {
  alarmId   Int  @id @default(autoincrement())
  user      User @relation(fields: [userId], references: [userId])
  userId    Int
  eventType Int
  post      Post @relation(fields: [postId], references: [postId])
  postId    Int
  checked   Int  @default(0)
}
